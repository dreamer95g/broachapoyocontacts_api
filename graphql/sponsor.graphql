type Sponsor {
    id: ID!
    name: String
    commitment: String
    communication: String
    contacts: [Contact] @belongsToMany
    offerings: [Offering] @hasMany
    categories: [Category] @belongsToMany
}

input CreateSponsorInput {
    name: String
    commitment: String
    communication: String
    contacts: ContactSponsorInput
    categories: CategorySponsorInput
}
input UpdateSponsorInput {
    id: ID!
    name: String
    commitment: String
    communication: String
    contacts: ContactSponsorInput
    categories: CategorySponsorInput
}

input CategorySponsorInput {
    connect: [ID]
    disconnect: [ID]
}

input ContactSponsorInput {
    connect: [ID]
    disconnect: [ID]
}

type Offering {
    id: ID!
    year: Int
    month: Int
    amount: Float
    sponsor: Sponsor @belongsTo
}

input CreateOfferingInput {
    year: Int
    month: Int
    amount: Float
    sponsor: SponsorOfferingInput
}

input UpdateOfferingInput {
    id: ID!
    year: Int
    month: Int
    amount: Float
    sponsor: SponsorOfferingInput
}

input SponsorOfferingInput {
    connect: ID
    disconnect: ID
}

extend type Mutation {
    # Offering
    createOffering(input: CreateOfferingInput! @spread): Offering
        @create
        @can(ability: "create")
        @guard(with: ["api"])

    updateOffering(input: UpdateOfferingInput! @spread): Offering
        @update
        @can(ability: "update", find: "id")
        @guard(with: ["api"])

    deleteOffering(id: ID! @rules(apply: ["required"])): Offering
        @delete
        @can(ability: "delete", find: "id")
        @guard(with: ["api"])

    # deleteOfferings(ids: [Int]): [Offering] @can(ability: "delete") @guard(with: ["api"])

    # Sponsor
    createSponsor(input: CreateSponsorInput! @spread): Sponsor
        @create
        @can(ability: "create")
        @guard(with: ["api"])

    updateSponsor(input: UpdateSponsorInput! @spread): Sponsor
        @update
        @can(ability: "update", find: "id")
        @guard(with: ["api"])

    deleteSponsor(id: ID! @rules(apply: ["required"])): Sponsor
        @delete
        @can(ability: "delete", find: "id")
        @guard(with: ["api"])

    # deleteSponsors(ids: [Int]): [Sponsor] @can(ability: "delete") @guard(with: ["api"])
}

extend type Query {
    # # Offering
    offeringWhere(
        where: _ @whereConditions(columns: ["year", "month", "amount"])
    ): Offering @find @softDeletes @guard(with: ["api"])

    offerings: [Offering]
        @paginate(type: "paginator", model: "App\\Models\\Offering")
        @softDeletes
        @guard(with: ["api"])

    # sponsors: [Sponsor] @all @softDeletes
    offering(id: ID @eq): Offering @find @softDeletes @guard(with: ["api"])

    # # Sponsor
    sponsorWhere(
        where: _
            @whereConditions(columns: ["name", "commitment", "communication"])
    ): Sponsor @find @softDeletes @guard(with: ["api"])

    sponsors: [Sponsor] @all @softDeletes @guard(with: ["api"])

    # sponsors: [Sponsor] @all @softDeletes
    sponsor(id: ID @eq): Sponsor @find @softDeletes @guard(with: ["api"])
}
